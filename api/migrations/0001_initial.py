# Generated by Django 5.2.5 on 2025-08-12 17:51

import api.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('admin', 'Admin')], default='student', max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(default='', max_length=100)),
                ('last_name', models.CharField(default='', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdminUpload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pdf_file', models.FileField(default='ugc_pdfs/original_file.pdf', max_length=500, upload_to='ugc_pdfs/', validators=[api.models.validate_file_extension])),
                ('original_filename', models.CharField(default='original_file.pdf', max_length=255)),
                ('file_size', models.BigIntegerField(default=0, help_text='File size in bytes')),
                ('vectorstore_path', models.CharField(blank=True, default='', max_length=500)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True, default='')),
                ('admin', models.ForeignKey(limit_choices_to={'user_type': 'admin'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(default='')),
                ('answer', models.TextField(default='Try again later')),
                ('asked_at', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('student', models.ForeignKey(limit_choices_to={'user_type': 'student'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Chat Histories',
                'ordering': ['-asked_at'],
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback', models.TextField(default='')),
                ('rating', models.IntegerField(blank=True, choices=[(1, 'Very Poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Excellent')], null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('student', models.ForeignKey(limit_choices_to={'user_type': 'student'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stream', models.CharField(default='', max_length=100)),
                ('year', models.IntegerField(default=2024)),
                ('z_score', models.FloatField(default=0.0)),
                ('confidence_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=10)),
                ('predicted_at', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('student', models.ForeignKey(limit_choices_to={'user_type': 'student'}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-predicted_at'],
            },
        ),
        migrations.CreateModel(
            name='PredictionSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(default=2024)),
                ('z_score', models.FloatField(default=0.0)),
                ('stream', models.CharField(choices=[('Biological Science', 'Biological Science'), ('Physical Science', 'Physical Science'), ('Commerce', 'Commerce'), ('Arts', 'Arts'), ('Engineering Technology', 'Engineering Technology'), ('Biosystems Technology', 'Biosystems Technology'), ('Other', 'Other')], default='Other', max_length=50)),
                ('district', models.CharField(choices=[('COLOMBO', 'COLOMBO'), ('GAMPAHA', 'GAMPAHA'), ('KALUTARA', 'KALUTARA'), ('KANDY', 'KANDY'), ('MATALE', 'MATALE'), ('NUWARA ELIYA', 'NUWARA ELIYA'), ('GALLE', 'GALLE'), ('MATARA', 'MATARA'), ('HAMBANTOTA', 'HAMBANTOTA'), ('JAFFNA', 'JAFFNA'), ('KILINOCHCHI', 'KILINOCHCHI'), ('MANNAR', 'MANNAR'), ('VAVUNIYA', 'VAVUNIYA'), ('MULLAITIVU', 'MULLAITIVU'), ('BATTICALOA', 'BATTICALOA'), ('AMPARA', 'AMPARA'), ('TRINCOMALEE', 'TRINCOMALEE'), ('KURUNEGALA', 'KURUNEGALA'), ('PUTTALAM', 'PUTTALAM'), ('ANURADHAPURA', 'ANURADHAPURA'), ('POLONNARUWA', 'POLONNARUWA'), ('BADULLA', 'BADULLA'), ('MONERAGALA', 'MONERAGALA'), ('RATNAPURA', 'RATNAPURA'), ('KEGALLE', 'KEGALLE')], default='COLOMBO', max_length=50)),
                ('total_predictions_generated', models.IntegerField(default=0)),
                ('confidence_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=10)),
                ('predicted_at', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('student', models.ForeignKey(limit_choices_to={'user_type': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='prediction_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-predicted_at'],
            },
        ),
        migrations.CreateModel(
            name='SavedPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('university_name', models.CharField(default='', max_length=200)),
                ('course_name', models.CharField(default='', max_length=200)),
                ('predicted_cutoff', models.FloatField(default=0.0, help_text='Predicted Z-score cutoff')),
                ('predicted_probability', models.FloatField(default=0.0, help_text='Probability of selection (0-1)')),
                ('aptitude_test_required', models.BooleanField(default=False)),
                ('all_island_merit', models.BooleanField(default=True)),
                ('rank_in_results', models.IntegerField(default=0, help_text='Rank when this prediction was generated')),
                ('saved_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, default='', help_text="Student's personal notes")),
                ('active', models.BooleanField(default=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_predictions', to='api.predictionsession')),
                ('student', models.ForeignKey(limit_choices_to={'user_type': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='saved_predictions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-saved_at'],
                'unique_together': {('student', 'session', 'university_name', 'course_name')},
            },
        ),
    ]
